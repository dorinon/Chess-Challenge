Index: Chess-Challenge/src/My Bot/MyBot.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System;\r\nusing ChessChallenge.API;\r\n\r\npublic class MyBot : IChessBot\r\n{\r\n    private int maxDepth = 3;\r\n    private Move bestMove;\r\n    private Board board;\r\n    // Point values for each piece type for evaluation\r\n    int[] piecesValues = {0, 100, 350, 350, 525, 1000, 99999};\r\n    public Move Think(Board board, Timer timer)\r\n    {\r\n        this.board = board;\r\n\r\n        // Call the Minimax algorithm to find the best move\r\n        Console.WriteLine(Search(maxDepth, -30000, 30000, board.IsWhiteToMove ? 1 : -1) + \"  \" + bestMove + \" is white turn: \" + board.IsWhiteToMove);\r\n        return bestMove;\r\n    }\r\n\r\n    // Negamax algorithm with alpha-beta pruning\r\n    private int Search(int depth, int alpha, int beta, int color)\r\n    {\r\n        if (board.IsDraw()) return 0;                                      \r\n        if (board.IsInCheckmate()) return -30000 - depth;\r\n        bool qsearch = depth <= 0;\r\n        Move[] legalMoves = board.GetLegalMoves(qsearch);\r\n        int bestEval = -30000;\r\n        int eval;\r\n        if (qsearch)\r\n        {\r\n            eval = EvaluateBoard(color);\r\n            bestEval = eval;\r\n            if(depth <= -2) return eval;\r\n        }\r\n        \r\n        // Generate and loop through all legal moves for the current player\r\n        for (int i = 0; legalMoves.Length > i; i++)\r\n        {\r\n            Move move = legalMoves[i];\r\n            // Make the move on a temporary board and call search recursively\r\n            board.MakeMove(move);\r\n            eval = -Search(depth -1, -beta, -alpha, -color);\r\n            board.UndoMove(move);\r\n\r\n            // Update the best move and prune if necessary\r\n            if (eval >= bestEval)   \r\n            {\r\n                bestEval = eval;\r\n                if (depth == maxDepth) bestMove = move;\r\n                \r\n                // Improve alpha\r\n                alpha = Math.Max(alpha, eval);\r\n                \r\n                //if (alpha >= beta) break;\r\n            }\r\n            \r\n        }\r\n        \r\n        return bestEval;\r\n    }\r\n\r\n    private int EvaluateBoard(int color)\r\n    {\r\n        int materialValue = 0;\r\n        int mobilityValue = board.GetLegalMoves().Length;\r\n        // Loop through each piece type and add the difference in material value to the total\r\n        for (int i = 0; ++i < 7;)\r\n            materialValue += (board.GetPieceList((PieceType)i, true).Count - board.GetPieceList((PieceType)i, false).Count) * piecesValues[i];\r\n        return materialValue * color + mobilityValue;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Chess-Challenge/src/My Bot/MyBot.cs b/Chess-Challenge/src/My Bot/MyBot.cs
--- a/Chess-Challenge/src/My Bot/MyBot.cs	
+++ b/Chess-Challenge/src/My Bot/MyBot.cs	
@@ -28,9 +28,9 @@
         int eval;
         if (qsearch)
         {
-            eval = EvaluateBoard(color);
-            bestEval = eval;
-            if(depth <= -2) return eval;
+            return EvaluateBoard(color);
+            //bestEval = eval;
+            //if(depth <= -2) return eval;
         }
         
         // Generate and loop through all legal moves for the current player
